{
  "swagger": "2.0",
  "info": {
    "title": "Adfy.io placement Service Twirp/JSON API Documentation",
    "version": "1.0"
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/twirp/adfy.io.rpc.placement.PlacementService/Create": {
      "post": {
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcplacementCreateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcplacementCreateRequest"
            }
          }
        ],
        "tags": [
          "PlacementService"
        ]
      }
    },
    "/twirp/adfy.io.rpc.placement.PlacementService/Delete": {
      "post": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcplacementIdRequest"
            }
          }
        ],
        "tags": [
          "PlacementService"
        ]
      }
    },
    "/twirp/adfy.io.rpc.placement.PlacementService/Edit": {
      "post": {
        "operationId": "Edit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcplacementEditResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcplacementEditRequest"
            }
          }
        ],
        "tags": [
          "PlacementService"
        ]
      }
    },
    "/twirp/adfy.io.rpc.placement.PlacementService/Get": {
      "post": {
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcplacementGetResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcplacementIdRequest"
            }
          }
        ],
        "tags": [
          "PlacementService"
        ]
      }
    },
    "/twirp/adfy.io.rpc.placement.PlacementService/GetAllByProject": {
      "post": {
        "operationId": "GetAllByProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcplacementListResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/placementGetAllByProjectRequest"
            }
          }
        ],
        "tags": [
          "PlacementService"
        ]
      }
    },
    "/twirp/adfy.io.rpc.placement.PlacementService/List": {
      "post": {
        "operationId": "List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcplacementListResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/placementListRequest"
            }
          }
        ],
        "tags": [
          "PlacementService"
        ]
      }
    }
  },
  "definitions": {
    "AreaPositions": {
      "type": "string",
      "enum": [
        "FLOAT",
        "STATIC"
      ],
      "default": "FLOAT"
    },
    "TemplateTypes": {
      "type": "string",
      "enum": [
        "FLOATING",
        "STATIC"
      ],
      "default": "FLOATING"
    },
    "areaArea": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "position": {
          "$ref": "#/definitions/AreaPositions"
        },
        "immutable": {
          "type": "boolean",
          "format": "boolean"
        },
        "embedCode": {
          "type": "string"
        }
      }
    },
    "placementGetAllByProjectRequest": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/rpcplacementIdRequest"
        }
      }
    },
    "placementListRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufStruct"
          }
        }
      }
    },
    "placementPlacement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/projectProject"
        },
        "area": {
          "$ref": "#/definitions/areaArea"
        },
        "template": {
          "$ref": "#/definitions/templateTemplate"
        },
        "data": {
          "type": "string"
        }
      }
    },
    "projectProject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "domain": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "embedCode": {
          "type": "string"
        }
      }
    },
    "protobufListValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Repeated field of dynamically typed values."
        }
      },
      "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array."
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "protobufStruct": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Unordered map of dynamically typed values."
        }
      },
      "description": "`Struct` represents a structured data value, consisting of fields\nwhich map to dynamically typed values. In some languages, `Struct`\nmight be supported by a native representation. For example, in\nscripting languages like JS a struct is represented as an\nobject. The details of that representation are described together\nwith the proto support for the language.\n\nThe JSON representation for `Struct` is JSON object."
    },
    "protobufValue": {
      "type": "object",
      "properties": {
        "null_value": {
          "$ref": "#/definitions/protobufNullValue",
          "description": "Represents a null value."
        },
        "number_value": {
          "type": "number",
          "format": "double",
          "description": "Represents a double value."
        },
        "string_value": {
          "type": "string",
          "description": "Represents a string value."
        },
        "bool_value": {
          "type": "boolean",
          "format": "boolean",
          "description": "Represents a boolean value."
        },
        "struct_value": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Represents a structured value."
        },
        "list_value": {
          "$ref": "#/definitions/protobufListValue",
          "description": "Represents a repeated `Value`."
        }
      },
      "description": "`Value` represents a dynamically typed value which can be either\nnull, a number, a string, a boolean, a recursive struct value, or a\nlist of values. A producer of value is expected to set one of that\nvariants, absence of any variant indicates an error.\n\nThe JSON representation for `Value` is JSON value."
    },
    "rpcplacementCreateRequest": {
      "type": "object",
      "properties": {
        "placment": {
          "$ref": "#/definitions/placementPlacement"
        }
      }
    },
    "rpcplacementCreateResponse": {
      "type": "object",
      "properties": {
        "placement": {
          "$ref": "#/definitions/placementPlacement"
        }
      }
    },
    "rpcplacementEditRequest": {
      "type": "object",
      "properties": {
        "placement": {
          "$ref": "#/definitions/placementPlacement"
        }
      }
    },
    "rpcplacementEditResponse": {
      "type": "object",
      "properties": {
        "placement": {
          "$ref": "#/definitions/placementPlacement"
        }
      }
    },
    "rpcplacementGetResponse": {
      "type": "object",
      "properties": {
        "placement": {
          "$ref": "#/definitions/placementPlacement"
        }
      }
    },
    "rpcplacementIdRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "rpcplacementListResponse": {
      "type": "object",
      "properties": {
        "placements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/placementPlacement"
          }
        }
      }
    },
    "templateTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "component": {
          "type": "string"
        },
        "formSchema": {
          "type": "string"
        },
        "sampleData": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/TemplateTypes"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Adfy.io github repository",
    "url": "https://github.com/vldmr-k/adfy.io"
  }
}
