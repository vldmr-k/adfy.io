#https://github.com/elliotchance/dingo

services:
  Config:
    type: "*adfy.io/pkg/config.Config"
    returns: config.NewConfig(${CONFIG_PATH})
  Db:
    type: "*adfy.io/pkg/db.Db"
    returns: "db.NewDb(@{Config})"
  Orm:
    type: "*adfy.io/pkg/db.Orm"
    returns: "db.NewGorm(@{Db})"
  JWT:
    type: "*adfy.io/pkg/jwt.JWT"
    returns: "jwt.NewJWT(@{Config})"
  Secure:
    type: "*adfy.io/pkg/secure.Secure"
    returns: "secure.NewSecure(6)"
  VerifyJWTHook:
    type: "*adfy.io/pkg/hook.VerifyJWTHook"
    returns: "hook.NewVerifyJWTHook(@{JWT})"


  UserService:
    type: "*adfy.io/internal/userservice.UserService"
    returns: "userservice.NewUserService(@{JWT}, @{Secure}, @{UserRepository}, @{AuthContext}, @{UserTransormer})"
  UserRepository:
    type: "*adfy.io/internal/userservice.UserRepository"
    returns: "userservice.NewUserRepository(@{Orm})"
  UserTransormer:
    type: "*adfy.io/internal/userservice.Transformer"
    returns: "userservice.NewTransformer()"

  ProjectService:
    type: "*adfy.io/internal/projectservice.ProjectService"
    returns: "projectservice.NewProjectService(@{ProjectRepository}, @{AuthContext}, @{ProjectFactory})"
  ProjectFactory:
    type: "*adfy.io/internal/projectservice.ProjectFactory"
    returns: "projectservice.NewProjectFactory()"
  ProjectRepository:
    type: "*adfy.io/internal/projectservice.ProjectRepository"
    returns: "projectservice.NewProjectRepository(@{Orm}, @{AuthContext})"

  MediaService:
    type: "*adfy.io/internal/mediaservice.MediaService"
    returns: "mediaservice.NewMediaService(@{MediaRepository}, @{MediaFactory}, @{MediaTransformer})"
  MediaFactory:
    type: "*adfy.io/internal/mediaservice.MediaFactory"
    returns: "mediaservice.NewMediaFactory()"
  MediaTransformer:
    type: "*adfy.io/internal/mediaservice.Transformer"
    returns: "mediaservice.NewTransformer()"
  MediaRepository:
    type: "*adfy.io/internal/mediaservice.MediaRepository"
    returns: "mediaservice.NewMediaRepository(@{Orm}, @{AuthContext})"
  MediaFileSystem:
    type: "*adfy.io/internal/mediaservice.FileSystem"
    returns: "mediaservice.NewFileSystem(@{AuthContext})"
  MediaUploader:
    type: "*adfy.io/internal/mediaservice.MediaUploader"
    returns: "mediaservice.NewMediaUploader(@{S3ClientPool})"

  TemplateService:
    type: "*adfy.io/internal/templateservice.TemplateService"
    returns: "templateservice.NewTemplateService(@{TemplateRepository}, @{AuthContext}, @{TemplateTransofrmer})"
  TemplateRepository:
    type: "*adfy.io/internal/templateservice.TemplateRepository"
    returns: "templateservice.NewTemplateRepository(@{Orm})"
  TemplateTransofrmer:
    type: "*adfy.io/internal/templateservice.Transformer"
    returns: "templateservice.NewTransformer()"
  TemplateHandler:
    type: "*adfy.io/internal/handler.TemplateHandler"
    returns: "handler.NewTemplateHandler(@{TemplateRepository})"



  AuthContext:
    type: "*adfy.io/pkg/ctx.AuthContext"
    returns: "ctx.NewAuthContext()"

  S3ClientPool:
    type: "*adfy.io/pkg/s3.S3ClientPool"
    returns: "s3.NewS3ClientPool(@{Config})"



  UserTwirpHandler:
    type: adfy.io/rpc/user.TwirpServer
    returns: user.NewUserServiceServer(@{UserService}, @{VerifyJWTHook}.WithJWTAuth("SignIn", "SignUp"))
  TemplateTwirpHandler:
    type: "adfy.io/rpc/template.TwirpServer"
    returns: "template.NewTemplateServiceServer(@{TemplateService}, @{VerifyJWTHook}.WithJWTAuth())"
  ProjectTwirpHandler:
    type: "adfy.io/rpc/project.TwirpServer"
    returns: "project.NewProjectServiceServer(@{ProjectService}, @{VerifyJWTHook}.WithJWTAuth())"
  MediaTwirpHandler:
    type: "adfy.io/rpc/media.TwirpServer"
    returns: "media.NewMediaServiceServer(@{MediaService}, @{VerifyJWTHook}.WithJWTAuth())"
