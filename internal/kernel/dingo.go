// Code generated by dingo; DO NOT EDIT
package kernel

import (
	handler "adfy.io/internal/handler"
	mediaservice "adfy.io/internal/mediaservice"
	projectservice "adfy.io/internal/projectservice"
	templateservice "adfy.io/internal/templateservice"
	userservice "adfy.io/internal/userservice"
	config "adfy.io/pkg/config"
	ctx "adfy.io/pkg/ctx"
	db "adfy.io/pkg/db"
	hook "adfy.io/pkg/hook"
	jwt "adfy.io/pkg/jwt"
	s3 "adfy.io/pkg/s3"
	secure "adfy.io/pkg/secure"
	media "adfy.io/rpc/media"
	project "adfy.io/rpc/project"
	template "adfy.io/rpc/template"
	user "adfy.io/rpc/user"
	"os"
)

type Container struct {
	AuthContext		*ctx.AuthContext
	Config			*config.Config
	Db			*db.Db
	JWT			*jwt.JWT
	MediaFactory		*mediaservice.MediaFactory
	MediaFileSystem		*mediaservice.FileSystem
	MediaRepository		*mediaservice.MediaRepository
	MediaService		*mediaservice.MediaService
	MediaTransformer	*mediaservice.Transformer
	MediaTwirpHandler	*media.TwirpServer
	MediaUploader		*mediaservice.MediaUploader
	Orm			*db.Orm
	ProjectFactory		*projectservice.ProjectFactory
	ProjectRepository	*projectservice.ProjectRepository
	ProjectService		*projectservice.ProjectService
	ProjectTwirpHandler	*project.TwirpServer
	S3ClientPool		*s3.S3ClientPool
	Secure			*secure.Secure
	TemplateHandler		*handler.TemplateHandler
	TemplateRepository	*templateservice.TemplateRepository
	TemplateService		*templateservice.TemplateService
	TemplateTransofrmer	*templateservice.Transformer
	TemplateTwirpHandler	*template.TwirpServer
	UserRepository		*userservice.UserRepository
	UserService		*userservice.UserService
	UserTransormer		*userservice.Transformer
	UserTwirpHandler	*user.TwirpServer
	VerifyJWTHook		*hook.VerifyJWTHook
}

var DefaultContainer = NewContainer()

func NewContainer() *Container {
	return &Container{}
}
func (container *Container) GetAuthContext() *ctx.AuthContext {
	if container.AuthContext == nil {
		service := ctx.NewAuthContext()
		container.AuthContext = service
	}
	return container.AuthContext
}
func (container *Container) GetConfig() *config.Config {
	if container.Config == nil {
		service := config.NewConfig(os.Getenv("CONFIG_PATH"))
		container.Config = service
	}
	return container.Config
}
func (container *Container) GetDb() *db.Db {
	if container.Db == nil {
		service := db.NewDb(container.GetConfig())
		container.Db = service
	}
	return container.Db
}
func (container *Container) GetJWT() *jwt.JWT {
	if container.JWT == nil {
		service := jwt.NewJWT(container.GetConfig())
		container.JWT = service
	}
	return container.JWT
}
func (container *Container) GetMediaFactory() *mediaservice.MediaFactory {
	if container.MediaFactory == nil {
		service := mediaservice.NewMediaFactory()
		container.MediaFactory = service
	}
	return container.MediaFactory
}
func (container *Container) GetMediaFileSystem() *mediaservice.FileSystem {
	if container.MediaFileSystem == nil {
		service := mediaservice.NewFileSystem(container.GetAuthContext())
		container.MediaFileSystem = service
	}
	return container.MediaFileSystem
}
func (container *Container) GetMediaRepository() *mediaservice.MediaRepository {
	if container.MediaRepository == nil {
		service := mediaservice.NewMediaRepository(container.GetOrm(), container.GetAuthContext())
		container.MediaRepository = service
	}
	return container.MediaRepository
}
func (container *Container) GetMediaService() *mediaservice.MediaService {
	if container.MediaService == nil {
		service := mediaservice.NewMediaService(container.GetMediaRepository(), container.GetMediaFactory(), container.GetMediaTransformer())
		container.MediaService = service
	}
	return container.MediaService
}
func (container *Container) GetMediaTransformer() *mediaservice.Transformer {
	if container.MediaTransformer == nil {
		service := mediaservice.NewTransformer()
		container.MediaTransformer = service
	}
	return container.MediaTransformer
}
func (container *Container) GetMediaTwirpHandler() media.TwirpServer {
	if container.MediaTwirpHandler == nil {
		service := media.NewMediaServiceServer(container.GetMediaService(), container.GetVerifyJWTHook().WithJWTAuth())
		container.MediaTwirpHandler = &service
	}
	return *container.MediaTwirpHandler
}
func (container *Container) GetMediaUploader() *mediaservice.MediaUploader {
	if container.MediaUploader == nil {
		service := mediaservice.NewMediaUploader(container.GetS3ClientPool())
		container.MediaUploader = service
	}
	return container.MediaUploader
}
func (container *Container) GetOrm() *db.Orm {
	if container.Orm == nil {
		service := db.NewGorm(container.GetDb())
		container.Orm = service
	}
	return container.Orm
}
func (container *Container) GetProjectFactory() *projectservice.ProjectFactory {
	if container.ProjectFactory == nil {
		service := projectservice.NewProjectFactory()
		container.ProjectFactory = service
	}
	return container.ProjectFactory
}
func (container *Container) GetProjectRepository() *projectservice.ProjectRepository {
	if container.ProjectRepository == nil {
		service := projectservice.NewProjectRepository(container.GetOrm(), container.GetAuthContext())
		container.ProjectRepository = service
	}
	return container.ProjectRepository
}
func (container *Container) GetProjectService() *projectservice.ProjectService {
	if container.ProjectService == nil {
		service := projectservice.NewProjectService(container.GetProjectRepository(), container.GetAuthContext(), container.GetProjectFactory())
		container.ProjectService = service
	}
	return container.ProjectService
}
func (container *Container) GetProjectTwirpHandler() project.TwirpServer {
	if container.ProjectTwirpHandler == nil {
		service := project.NewProjectServiceServer(container.GetProjectService(), container.GetVerifyJWTHook().WithJWTAuth())
		container.ProjectTwirpHandler = &service
	}
	return *container.ProjectTwirpHandler
}
func (container *Container) GetS3ClientPool() *s3.S3ClientPool {
	if container.S3ClientPool == nil {
		service := s3.NewS3ClientPool(container.GetConfig())
		container.S3ClientPool = service
	}
	return container.S3ClientPool
}
func (container *Container) GetSecure() *secure.Secure {
	if container.Secure == nil {
		service := secure.NewSecure(6)
		container.Secure = service
	}
	return container.Secure
}
func (container *Container) GetTemplateHandler() *handler.TemplateHandler {
	if container.TemplateHandler == nil {
		service := handler.NewTemplateHandler(container.GetTemplateRepository())
		container.TemplateHandler = service
	}
	return container.TemplateHandler
}
func (container *Container) GetTemplateRepository() *templateservice.TemplateRepository {
	if container.TemplateRepository == nil {
		service := templateservice.NewTemplateRepository(container.GetOrm())
		container.TemplateRepository = service
	}
	return container.TemplateRepository
}
func (container *Container) GetTemplateService() *templateservice.TemplateService {
	if container.TemplateService == nil {
		service := templateservice.NewTemplateService(container.GetTemplateRepository(), container.GetAuthContext(), container.GetTemplateTransofrmer())
		container.TemplateService = service
	}
	return container.TemplateService
}
func (container *Container) GetTemplateTransofrmer() *templateservice.Transformer {
	if container.TemplateTransofrmer == nil {
		service := templateservice.NewTransformer()
		container.TemplateTransofrmer = service
	}
	return container.TemplateTransofrmer
}
func (container *Container) GetTemplateTwirpHandler() template.TwirpServer {
	if container.TemplateTwirpHandler == nil {
		service := template.NewTemplateServiceServer(container.GetTemplateService(), container.GetVerifyJWTHook().WithJWTAuth())
		container.TemplateTwirpHandler = &service
	}
	return *container.TemplateTwirpHandler
}
func (container *Container) GetUserRepository() *userservice.UserRepository {
	if container.UserRepository == nil {
		service := userservice.NewUserRepository(container.GetOrm())
		container.UserRepository = service
	}
	return container.UserRepository
}
func (container *Container) GetUserService() *userservice.UserService {
	if container.UserService == nil {
		service := userservice.NewUserService(container.GetJWT(), container.GetSecure(), container.GetUserRepository(), container.GetAuthContext(), container.GetUserTransormer())
		container.UserService = service
	}
	return container.UserService
}
func (container *Container) GetUserTransormer() *userservice.Transformer {
	if container.UserTransormer == nil {
		service := userservice.NewTransformer()
		container.UserTransormer = service
	}
	return container.UserTransormer
}
func (container *Container) GetUserTwirpHandler() user.TwirpServer {
	if container.UserTwirpHandler == nil {
		service := user.NewUserServiceServer(container.GetUserService(), container.GetVerifyJWTHook().WithJWTAuth("SignIn", "SignUp"))
		container.UserTwirpHandler = &service
	}
	return *container.UserTwirpHandler
}
func (container *Container) GetVerifyJWTHook() *hook.VerifyJWTHook {
	if container.VerifyJWTHook == nil {
		service := hook.NewVerifyJWTHook(container.GetJWT())
		container.VerifyJWTHook = service
	}
	return container.VerifyJWTHook
}
