// @generated by protobuf-ts 2.4.0 with parameter force_server_none,optimize_code_size,enable_angular_annotations,generate_dependencies,// @generated from protobuf file "project/service.proto" (package "adfy.io.rpc.project", syntax proto3),// tslint:disable
import { Inject } from "@angular/core";
import { RPC_TRANSPORT } from "@protobuf-ts/runtime-angular";
import { Injectable } from "@angular/core";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ProjectService } from "./service";
import type { UpdateResponse } from "./service";
import type { UpdateRequest } from "./service";
import type { AllResponse } from "./service";
import type { Empty } from "../google/protobuf/empty";
import type { GetResponse } from "./service";
import type { IdRequest } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateResponse } from "./service";
import type { CreateRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service adfy.io.rpc.project.ProjectService
 */
export interface IProjectServiceClient {
    /**
     * @generated from protobuf rpc: Create(adfy.io.rpc.project.CreateRequest) returns (adfy.io.rpc.project.CreateResponse);
     */
    create(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, CreateResponse>;
    /**
     * @generated from protobuf rpc: Get(adfy.io.rpc.project.IdRequest) returns (adfy.io.rpc.project.GetResponse);
     */
    get(input: IdRequest, options?: RpcOptions): UnaryCall<IdRequest, GetResponse>;
    /**
     * @generated from protobuf rpc: All(google.protobuf.Empty) returns (adfy.io.rpc.project.AllResponse);
     */
    all(input: Empty, options?: RpcOptions): UnaryCall<Empty, AllResponse>;
    /**
     * @generated from protobuf rpc: Update(adfy.io.rpc.project.UpdateRequest) returns (adfy.io.rpc.project.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse>;
    /**
     * @generated from protobuf rpc: Delete(adfy.io.rpc.project.IdRequest) returns (google.protobuf.Empty);
     */
    delete(input: IdRequest, options?: RpcOptions): UnaryCall<IdRequest, Empty>;
}
/**
 * @generated from protobuf service adfy.io.rpc.project.ProjectService
 */
@Injectable()
export class ProjectServiceClient implements IProjectServiceClient, ServiceInfo {
    typeName = ProjectService.typeName;
    methods = ProjectService.methods;
    options = ProjectService.options;
    constructor(
    @Inject(RPC_TRANSPORT)
    private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Create(adfy.io.rpc.project.CreateRequest) returns (adfy.io.rpc.project.CreateResponse);
     */
    create(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, CreateResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRequest, CreateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Get(adfy.io.rpc.project.IdRequest) returns (adfy.io.rpc.project.GetResponse);
     */
    get(input: IdRequest, options?: RpcOptions): UnaryCall<IdRequest, GetResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<IdRequest, GetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: All(google.protobuf.Empty) returns (adfy.io.rpc.project.AllResponse);
     */
    all(input: Empty, options?: RpcOptions): UnaryCall<Empty, AllResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, AllResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(adfy.io.rpc.project.UpdateRequest) returns (adfy.io.rpc.project.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRequest, UpdateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(adfy.io.rpc.project.IdRequest) returns (google.protobuf.Empty);
     */
    delete(input: IdRequest, options?: RpcOptions): UnaryCall<IdRequest, Empty> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<IdRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
