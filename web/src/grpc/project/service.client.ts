// @generated by protobuf-ts 2.4.0 with parameter force_server_none,optimize_code_size,enable_angular_annotations,// @generated from protobuf file "project/service.proto" (package "adfy.io.rpc.project", syntax proto3),// tslint:disable
import { Inject } from "@angular/core";
import { RPC_TRANSPORT } from "@protobuf-ts/runtime-angular";
import { Injectable } from "@angular/core";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ProjectService } from "./service";
import type { EditRequest } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ProjectResponse } from "./service";
import type { CreateRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service adfy.io.rpc.project.ProjectService
 */
export interface IProjectServiceClient {
    /**
     * @generated from protobuf rpc: CreateProject(adfy.io.rpc.project.CreateRequest) returns (adfy.io.rpc.project.ProjectResponse);
     */
    createProject(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, ProjectResponse>;
    /**
     * @generated from protobuf rpc: EditProject(adfy.io.rpc.project.EditRequest) returns (adfy.io.rpc.project.ProjectResponse);
     */
    editProject(input: EditRequest, options?: RpcOptions): UnaryCall<EditRequest, ProjectResponse>;
}
/**
 * @generated from protobuf service adfy.io.rpc.project.ProjectService
 */
@Injectable()
export class ProjectServiceClient implements IProjectServiceClient, ServiceInfo {
    typeName = ProjectService.typeName;
    methods = ProjectService.methods;
    options = ProjectService.options;
    constructor(
    @Inject(RPC_TRANSPORT)
    private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateProject(adfy.io.rpc.project.CreateRequest) returns (adfy.io.rpc.project.ProjectResponse);
     */
    createProject(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, ProjectResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRequest, ProjectResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EditProject(adfy.io.rpc.project.EditRequest) returns (adfy.io.rpc.project.ProjectResponse);
     */
    editProject(input: EditRequest, options?: RpcOptions): UnaryCall<EditRequest, ProjectResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<EditRequest, ProjectResponse>("unary", this._transport, method, opt, input);
    }
}
